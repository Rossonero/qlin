import os

from libc.stdlib cimport malloc,free,realloc

from libc.stdio cimport fopen, fwrite, fread,fclose,FILE 

from parser.Init_Thes import Init_thesaurus , init_hashIndex





DEF STEP=20



#定义 hashIndex 结构
cdef struct HI: #hashIndex 结构
    int left    #左侧范围
    int right   #右侧范围
    



DEF List_init_size = 100  #定义List初始化长度

#DEF List_max_size = 1000  #定义List最长长度

#DEF List_add = 100

DEF List_num = 20         #hit_lists中划分 块 数目

DEF Doc_Each_Contain = 100  #每个文件中的占有的文件数目


#定义 Hit 结构
cdef struct Hit:
    int wordID
    int docID
    short score
    int pos


#单个list结构
cdef struct List:
    Hit *start
    int length
    int top
    int size        #此记录中的总hit数目  初始化时需要使用


cdef class Hit_lists:

    '''
    hit存储队列
    每个list对应于一个存储文件
    '''

    cdef:
        int length
        int top
        List hit_list[List_num]

    def __cinit__(self):

        '''
        初始化数据空间
        '''

        print '>begin init List space'

        cdef:
            int i

        #初始化每个list节点
        for i in range(List_num):

            self.hit_list[i].start=<Hit *>malloc( sizeof(Hit) * List_init_size )
            self.hit_list[i].length=List_init_size
            self.hit_list[i].top=-1
            self.hit_list[i].size=0

            if self.hit_list[i].start!= NULL:

                print '>>init list ok!'


    cdef __delloc__(self):

        '''
        消去内存
        '''

        cdef int i

        print 'begin to delete the space'

        for i in range(List_num):
            free(self.hit_list[i].start)


    cdef void eq(self,int hit_id,int idx,int wordID,int docID,short score,int pos):

        '''
        赋值处理
        '''

        '''
        print '- eq'
        
        print '>eq: ',hit_id,idx,wordID,docID,score,pos
        print '>eq: the status of this list is:'
        print 'top',self.hit_list[hit_id].top
        print 'length',self.hit_list[hit_id].length
        '''

        self.hit_list[hit_id].start[idx].wordID=wordID

        self.hit_list[hit_id].start[idx].docID=docID

        self.hit_list[hit_id].start[idx].score=score

        self.hit_list[hit_id].start[idx].pos=pos




    def ap(self,int hit_id , int wordID , int docID , short score , int pos):

        '''
        向list中添加数据
        如果list溢出 则返回False
        添加成功 返回True
        '''
        #print 'begin append the word hit >>>>>'

        self.hit_list[hit_id].top += 1
        self.hit_list[hit_id].size += 1

        print '+ hit.top+1'
        #print '+ begin eq'

        self.eq( hit_id, self.hit_list[hit_id].top ,wordID,docID,score,pos)

        #print '> succed eq'

        if (self.hit_list[hit_id].top > self.hit_list[hit_id].length-2):
            #如果 分配长度快到最大长度 则返回false
            #如果 lenth还有空间 继续分配空间

            '''if (self.hit_list[hit_id].length < List_max_size):

                #添加新的空间
                #再添加 hit_add 个空间

                print '+ begin to relloc'

                self.hit_list[hit_id].start=<Hit *>realloc( self.hit_list[hit_id].start , sizeof(Hit) * (self.hit_list[hit_id].length+List_add))

                print '- succed relloc'

                self.hit_list[hit_id].length += List_add

                return True

            else:
                #已经达到最大限度
                #应该将其添加入文件中
                return False
                '''
            return False

        else:
            #空间和其他都不缺少
            #正常情况
            return True


    cdef void empty(self,int hit_id):

        '''
        将List清空
        释放空间
        再重新分配基本空间
        '''

        print 'begin to free the list'

        #free(self.hit_list[hit_id].start)
        #重新分配内存

        print 'begin to relloc it'
        #self.hit_list[hit_id].start = <Hit *>malloc( sizeof(Hit) * List_init_size )
        #self.hit_list[hit_id].length=List_init_size
        self.hit_list[hit_id].top=-1

    cdef Hit *get_head(self,int idx):
        return <Hit *>self.hit_list[idx].start




cdef class Indexer:
######################################
#        开始仅仅使用wid
#
######################################
    '''
    索引器
    最终将要产生两类hit
    一类为 docID 排序
    一类为 wID 排序

    在 docID 排序的时候 
    在扫描 wID 同时 存储 docID

    docID 需要 根据 文件个数 确定 每快存储长度
    最终需要根据 wID进行排序
    wordID 需要根据 wordID 进行排序
    ???????????两者均需要排序????????????
    '''

    #文件目录地址
    cdef char *fph

    cdef char *toph

    cdef Hit_lists hit_list

    cdef object thes

    cdef object hash_index

    #词库
    def __cinit__(self,char *wph,char *fph,char *toph):

        '''
        init
        ph: wordsplit文件目录地址
        '''

        self.fph=fph
        self.toph=toph

        #初始化 Hit_list
        self.hit_list = Hit_lists()
        #词库
        self.thes = Init_thesaurus(wph)

        self.hash_index = init_hashIndex('store/index_hash.b','store/word_wide.txt')


    cdef int loc_list(self,hashvalue):

        '''
        传入一个word
        定位 其 应该存在的 list 
        可以继承 词库 
        '''

        return self.hash_index.pos(hash(hashvalue))


    cdef void __save_hit_size(self,char *ph):

        '''
        保存每个hitlist的数量
        以便初始化
        '''
        print 'begin to save hit_size'
        
        cdef:
            int i

        strr=''

        for i in range(List_num):
           strr += str( self.hit_list.hit_list[i].size ) + ' '

        f=open(ph,'w')
        f.write(strr)
        f.close()


    def run(self):

        '''
        运行主程序
        需要同时对wordid 和 docid 进行分类保存

        '''

        cdef:
            int list_idx    #定位 list 的号码
            object li
            object c
            #词库长度
            int length
            #相对pos
            int abspos

        cdef:
            int pos
            #wordid 
            long wid
            int scoid
            #对应于 list 中 的 list_id
            int docid

        li=os.listdir(self.fph)

        length=len(li)
        
        dig = 0

        for doc in li:

            print 'doc is',doc

            f=open(self.fph+'/'+doc)
            c=f.read()
            f.close()

            tags=c.split('@chunwei@')
            abspos=0

            for scoid,tag in enumerate(tags):

                #对每个标签进行处理
                words=tag.split()

                
                for pos,word in enumerate(words):

                    #开始扫面每一个tag ?????????????????????
                    print '开始在词库中查词'

                    wid=self.thes.find(word)
                    print 'from wordBar find',wid
                    #定位 list号码
                    list_idx=self.loc_list(word)

                    #若 wid 为 0 表示 词汇不存在

                    if wid != 0:


                        #此处 为了将不同tag内的hit的pos完全分给开
                        #采用 自动添加 20 作为间隔
                        
                        print list_idx,wid,doc,scoid, pos+abspos+20

                        #print 'begin append'

                        if self.hit_list.ap(list_idx,wid,int(doc),scoid, pos+abspos+20 ) == 1:

                            pass

                        else:

                            #将 list_idx 对应的list写入到文件

                            print '-'*50
                            print 'the stack is full'

                            self.add_save(list_idx)


                            print 'begin to empty the stack'

                            #将相应list清空
                            self.hit_list.empty(list_idx)


        #将剩余的hits进行存储
        #一些list hit 数目不超过 max_size
        for i in range(List_num):
            self.add_save(i)
            
        



    cdef sort(self):

        '''
        将结果逐个进行排序
        在客户端已经进行排序???
        '''
        pass



    cdef void add_save(self,int list_idx):

        '''
        将相关内容添加到文件中 
        默认 便是 在 wordID 范围内乱序排列
        '''
        print '>> add save'
        print '-'*50

        name=self.toph+'/'+str(list_idx)+'.hit'
        
        print 'the docname is',name

        cdef char *fh=name

        cdef FILE *fp=<FILE *>fopen(fh,"ab")

        #此处 size 需要???????????????????????????????????????
        '''
        print 'begin to write'
        print 'the status of the information'
        print sizeof(Hit)
        print self.hit_list.hit_list[list_idx].top+1
        print 'the size of',list_idx, self.hit_list.hit_list[list_idx].size
        '''

        fwrite( self.hit_list.hit_list[list_idx].start , sizeof(Hit) ,  self.hit_list.hit_list[list_idx].top+1 , fp)
        fclose(fp)

        #保存 hit 记录数目
        self.__save_hit_size('store/hits/hit_size.txt')


##########################
####    docid 存储   #####
##########################

cdef class Doc_Hit_lists:

    '''
    面向 docid 的hit存储队列
    每个list对应于一个存储文件
    '''

    cdef:
        List hit_list
        #每个doc的总长度
        int length

    def __cinit__(self):

        '''
        初始化数据空间
        '''

        print '>begin init List space'

        #初始化词库
        self.thes = Init_thesaurus(wph)

        #初始化list节点
        self.hit_list.start=<Hit *>malloc( sizeof(Hit) * List_init_size )
        self.hit_list.length=List_init_size
        self.hit_list.top=-1
        self.hit_list.size=0

        if self.hit_list.start!= NULL:

            print '>>init list ok!'


    cdef __delloc__(self):

        '''
        消去内存
        '''

        print 'begin to delete the space'

        free(self.hit_list.start)


    cdef void eq(self,int idx,int wordID,int docID,short score,int pos):

        '''
        赋值处理
        '''

        self.hit_list.start[idx].wordID=wordID

        self.hit_list.start[idx].docID=docID

        self.hit_list.start[idx].score=score

        self.hit_list.start[idx].pos=pos




    def ap(self , int wordID , int docID , short score , int pos):

        '''
        向list中添加数据
        如果list溢出 则返回False
        添加成功 返回True
        '''

        self.hit_list.top += 1
        self.hit_list.size += 1

        self.eq(self.hit_list.top ,wordID,docID,score,pos)

        if (self.hit_list.top > self.hit_list.length-2):
            #如果 分配长度快到最大长度 则返回false
            #如果 lenth还有空间 继续分配空间

            return False

        else:
            #空间和其他都不缺少
            #正常情况
            return True


    cdef void empty(self):

        '''
        将List清空
        释放空间
        再重新分配基本空间
        '''

        self.hit_list.top=-1


##############################
#    hit 排序
#
##############################

#导入 hit_sort库
from index.hit_sort import Wid_sort


class Sort_hits:

    '''
    对 hits 进行排序
    包括对 hits 的排序
    '''

    cdef Hit *hit_list

    cdef int width[List_num]

    def __cinit__(self,char *width_ph):

        '''
        init
        '''

        #初始化width
        f = open(width_ph)
        c=f.read()
        f.close()

        cdef int i=0
        #初始化 每个文件的 hit 数量记录
        for w in c.split():
            self.width[i]=int(w) 
            i+=1

        #初始化 排序库 ????????????????
        self.hitsort=hit_sort()

        print 'init ok!'


    def init(self,char *fdir,int index):

        '''
        从 hit 文件中初始化 hit_list
        分配内存
        '''

        if(self.hit_list != NULL):
            print 'free the former hit_list'
            free(self.hit_list)

        print 're malloc'
        self.hit_list= <Hit *> malloc ( sizeof(Hit) * self.width[i] )

        print 'begin read the file'

        fname = fdir + str(index)

        cdef FILE *fp=<FILE *>fopen(fname,"rb")

        fread(self.hit_list , sizeof(Hit), self.width[index] ,fp)

        fclose(ph)
        #初始化基础信息
        self.hit_list.top = self.width[i]
        self.hit_list.length = self.width[i]




    cdef sort_wid(self,char *fdir,int index):

        '''
        在 wid 中进行排序 
        '''
         
        self.init(fdir,index)


        #初始化 wid_sort
        #此处使用了效率较低的重复初始化class
        #可以改进!!!!!!!!!!!!!!!!!!!
        
        #需要同时修改 长度 ??????????????????????????
        hit_sort = hit_sort(self.hit_list,self.hit_list.top)

        #快速排序
        self.hit_sort.sort_in_wid(0,self.hit_list.top)


        #wid已经排序完毕
        #开始扫描list 
        #在同一个wid内进行docid排序
        #需要确定边界
        cdef:
            int cur_wid
            int i = 0
            int cur_step

            int j = 0
            int cur_score

        #从最小的wid开始扫描排序
        cur_wid = self.hit_list[0].wid
        #初始索引
        cur_step = 0

        while i < self.width[index]:

            #开始扫描 hit_list
            if self.hit_list[i].wid == cur_wid:
                pass

            else:
                #i为 同一个 wid 内的docid数量
                self.hitsort.sort_in_did(cur_step , i-1)

                #开始在docid排序后
                #进行根据scoreid的排序
                j=cur_step

                #开始进行排序
                cur_score = j

                while j < i:
                    #对 每个docid内的score进行排序
                    if self.hit_list[j].score == cur_score:
                        pass
                    else:
                        self.hitsort.sort_score(
                    j+=1

                #?????????此处需要测试 
                cur_step = i

            i+=1
        print 'sort ok'



    cdef sort_did(self):
        
        '''
        在 did 中进行排序
        '''

        self.init(fdir,index)

        self.hitsort.sort_wid(self.hit_list)

        #wid已经排序完毕
        #开始扫描list 
        #在同一个wid内进行docid排序
        #需要确定边界
        cdef:
            int cur_did
            int i = 0
            int cur_step

            int j = 0
            int cur_score

        #从最小的wid开始扫描排序
        dur_wid = self.hit_list[0].docid
        #初始索引
        cur_step = 0

        while i < self.width[index]:

            #开始扫描 hit_list
            if self.hit_list[i].wid == cur_did:
                pass

            else:
                #i为 同一个 wid 内的docid数量
                self.hitsort.sort_docid(cur_step , i-1)

                #开始在docid排序后
                #进行根据scoreid的排序
                j=cur_step

                #开始进行排序
                cur_pos = j

                while j < i:
                    #对 每个docid内的score进行排序
                    if self.hit_list[j].pos == cur_pos:
                        pass
                    else:
                        self.hitsort.sort_pos(
                    j+=1

                #?????????此处需要测试 
                cur_step = i

            i+=1
        print 'sort ok'



    def save(self,ph):
        
        '''
        将 hit_list进行排序
        '''

        cdef FILE *fp=<FILE *>fopen(fname,"rb")

        fread(self.hit_list , sizeof(Hit), self.width[index] ,fp)

        fclose(ph)






    


