from parser.Init_Thes import Init_thesaurus , init_hashIndex

from libc.stdlib cimport malloc,free,realloc

from libc.stdio cimport fopen, fwrite, fread,fclose,FILE 

        '''
        算法：
            定位到 wordid
            返回每个docid的第一个记录
            
            再查找第二个词及以上时
            直接在wordid中扫描原有docid
            如果存在 加上score 否则 将原有记录刷新为0（表示放弃此docid)
            
            一直到最后 整理结果
            进行排序
            返回结果
        '''

#记录的hit结构
cdef struct Whit:
    int docid
    int score



from libc.stdlib cimport malloc,free,realloc



#查询时 存储队列
cdef struct Whit:
    int docID
    int score
    int pos



cdef class Hit_find:

    '''
    从hit中查取相应内容
    '''

    #whit 存储目录
    cdef char *fdir
    #whit 存储队列
    cdef Whit *hit_list
    #whit 长度
    cdef int length


    def __cinit__(self,char *fdir):
        '''
        init
        '''
        #初始化hit地址
        self.fdir=fdir
        self.hashIndex = init_hashIndex("store/index_hash.b","store/word_wide.txt")


    cdef void init(self,int index):

        '''
        初始化队列
        传入 index 
        返回 hits/ 中对应文件中内容
        '''
        if(self.



    cdef int pos_word_file(self,hashvalue):

        '''
        对word区分范围
        找到相关hit文件
        '''
        return self.hashIndex.pos(hashvalue)



    def get_doc_ids(self,word):
        '''
        返回找到的docids
        并且划分一定内存 
        记录相关hit
        '''



